#!/usr/bin/env bash
# Script Description:
# This script generates a MySQL dump of all databases, compresses it into a tar.gz archive,
# and optionally cleans up the temporary dump file. It provides informative error handling,
# validates the dump and archive integrity, and follows recommended best practices for enhanced clarity and security.

# Function to generate MySQL dump, compress, and validate
backup_mysql() {
  local mysql_user="root"  # Replace with a dedicated user (recommended)
  local mysql_password="$1"
  local backup_file="backup.sql"
  local today=$(date +%d-%m-%Y)
  local archive_file="$today.tar.gz"

  # Dump all databases
  mysqldump -u "$mysql_user" -p"$mysql_password" --all-databases > "$backup_file" || {
    echo "Error: Failed to create MySQL dump."
    exit 1
  }

  echo "MySQL dump created successfully: $backup_file"

  # Create compressed archive
  tar -czvf "$archive_file" "$backup_file" || {
    echo "Error: Failed to create compressed archive: $archive_flt"
    exit 1
  }

  echo "Compressed archive created: $archive_file"

  # Basic dump validation (check if file size is greater than zero)
  if [ ! -s "$backup_file" ]; then
    echo "Warning: MySQL dump file appears empty. Consider re-running the backup."
  fi

  # Basic archive validation (check if file exists)
  if [ ! -f "$archive_file" ]; then
    echo "Error: Compressed archive not found: $archive_file"
    exit 1
  fi

  # Optional cleanup (uncomment to remove the temporary dump file)
  # rm -f "$backup_file"
}

# Usage:
# ./5-mysql_backup <your_mysql_password>  # Pass password as an argument

# Main execution
if [ $# -eq 0 ]; then
  echo "Error: Please provide your MySQL password as an argument."
  exit 1
fi

backup_mysql "$1"

echo "MySQL backup completed!"

